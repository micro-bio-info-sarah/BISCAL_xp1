}
colnames(tmp_data)[3] <- "value"
library(agricolae)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment, na.action = na.omit )
summary(tmp_lm)
# anova
anova(tmp_lm)
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
tmp_comp <- HSD.test(tmp_aov,'tmp_data$treatment',alpha = 0.05,group = T)
# tibble with statistical groups
tmp_stat = tibble("treatment"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_data$value"]],
"stat_groups"=tmp_comp[["groups"]][["groups"]])
# put a * for treatments in a different group than the control
tmp_stat[,"stat_dif_control"] <- NA
if (tmp_phase == "Step 1") {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C"],""))
} else {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C_C"],""))
}
for (i in tmp_stat$treatment) {
tmp_group_treatment = unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == i],""))
ifelse(length(intersect(tmp_group_control,tmp_group_treatment)) == 0,
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- "*",
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- " ")
}
rm(i)
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
save.image("D:/Thesis/EMFEED/BISCAL_xp1/Gitlab/GlobalEnv.RData")
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library(ggplot2)
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# select which data you want to test
tmp_barcode = "16S" # "16S" or "18S"
tmp_phase = "Step 1" # "Step 1" or "Step 2"
#â—‹ select data from the chosen barcode
if (tmp_barcode == "16S") {
tmp_ps0 = ps_16S
tmp_sample_size = 9000
} else {
tmp_ps0 = ps_18S
tmp_sample_size = 8000
}
# select which data you want to test
tmp_barcode = "16S" # "16S" or "18S"
tmp_phase = "Step 1" # "Step 1" or "Step 2"
# select data from the chosen barcode
if (tmp_barcode == "16S") {
tmp_ps0 = ps_16S
tmp_sample_size = 9000
} else {
tmp_ps0 = ps_18S
tmp_sample_size = 8000
}
# select data from the chosen step
if (tmp_phase = "Step 1") {
# select data from the chosen barcode
if (tmp_barcode == "16S") {
tmp_ps0 = ps_16S
tmp_sample_size = 9000
} else {
tmp_ps0 = ps_18S
tmp_sample_size = 8000
}
# select data from the chosen step
if (tmp_phase == "Step 1") {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase %in% c("Step 1","Step 0")) # select both Step 1 treatments and Original soil
tmp_ps = rarefy_even_depth(tmp_ps,sample.size = tmp_sample_size) # rarefy dataset
} else {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase == "Step 2") # select both Step 2 treatments
tmp_ps = rarefy_even_depth(tmp_ps,sample.size = tmp_sample_size) # rarefy dataset
}
# calculate weighted Unifrac distances
tmp_dist = distance(tmp_ps,"wunifrac")
# calculate ordination
tmp_ordin = ordinate(tmp_ps, "PCoA", distance = tmp_dist)
tmp_dist_matrix = melt(as.matrix(tmp_dist))
library(reshape2)
tmp_dist_matrix = melt(as.matrix(tmp_dist))
tmp_dist_matrix[tmp_dist_matrix$Var1 == tmp_dist_matrix$Var2,]
tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
# wrangle distance matrix into a longer dataframe
tmp_dist_matrix = melt(as.matrix(tmp_dist))
# remove self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
# select sample data
tmp_sam_data = tibble("sample"=tmp_ps@sam_data$sample,
"treatment"=tmp_ps@sam_data$treatment)
# combined distances with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
library(reshape2)
# wrangle distance matrix into a longer dataframe
tmp_dist_matrix = melt(as.matrix(tmp_dist))
# remove self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
# select sample data
tmp_sam_data = tibble("sample"=tmp_ps@sam_data$sample,
"treatment"=tmp_ps@sam_data$treatment)
# combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
# select distances from the control
tmp_data <- tmp_data[tmp_data$treatment1 == tmp_control,]
tmp_control = "C"
library(reshape2)
# wrangle distance matrix into a longer dataframe
tmp_dist_matrix = melt(as.matrix(tmp_dist))
# remove self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
# select sample data
tmp_sam_data = tibble("sample"=tmp_ps@sam_data$sample,
"treatment"=tmp_ps@sam_data$treatment)
# combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
# select distances from the control
tmp_data <- tmp_data[tmp_data$treatment1 == tmp_control,]
View(tmp_data)
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# select which data you want to test
tmp_barcode = "16S" # "16S" or "18S"
tmp_phase = "Step 1" # "Step 1" or "Step 2"
# select data from the chosen barcode
if (tmp_barcode == "16S") {
tmp_ps0 = ps_16S
tmp_sample_size = 9000
} else {
tmp_ps0 = ps_18S
tmp_sample_size = 8000
}
# select data from the chosen step
if (tmp_phase == "Step 1") {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase %in% c("Step 1","Step 0")) # select both Step 1 treatments and Original soil
tmp_ps = rarefy_even_depth(tmp_ps,sample.size = tmp_sample_size) # rarefy dataset
tmp_control = "C"
} else {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase == "Step 2") # select both Step 2 treatments
tmp_ps = rarefy_even_depth(tmp_ps,sample.size = tmp_sample_size) # rarefy dataset
tmp_control = "C_C"
}
# calculate weighted Unifrac distances
tmp_dist = distance(tmp_ps,"wunifrac")
# calculate ordination
tmp_ordin = ordinate(tmp_ps, "PCoA", distance = tmp_dist)
library(reshape2)
# wrangle distance matrix into a longer dataframe
tmp_dist_matrix = melt(as.matrix(tmp_dist))
# remove self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
# select sample data
tmp_sam_data = tibble("sample"=tmp_ps@sam_data$sample,
"treatment"=tmp_ps@sam_data$treatment)
# combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
# select distances from the control
tmp_data <- tmp_data[tmp_data$treatment1 == tmp_control,]
library(agricolae)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment, na.action = na.omit )
library(agricolae)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment2, na.action = na.omit )
summary(tmp_lm)
# anova
anova(tmp_lm)
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
tmp_comp <- HSD.test(tmp_aov,'tmp_data$treatment',alpha = 0.05,group = T)
# tibble with statistical groups
tmp_stat = tibble("treatment"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_data$value"]],
"stat_groups"=tmp_comp[["groups"]][["groups"]])
# put a * for treatments in a different group than the control
tmp_stat[,"stat_dif_control"] <- NA
if (tmp_phase == "Step 1") {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C"],""))
} else {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C_C"],""))
}
for (i in tmp_stat$treatment) {
tmp_group_treatment = unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == i],""))
ifelse(length(intersect(tmp_group_control,tmp_group_treatment)) == 0,
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- "*",
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- " ")
}
rm(i)
View(tmp_stat)
knitr::opts_chunk$set(echo = TRUE)
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# select which data you want to test
tmp_barcode = "16S" # "16S" or "18S"
tmp_phase = "Step 1" # "Step 1" or "Step 2"
# select data from the chosen barcode
if (tmp_barcode == "16S") {
tmp_ps0 = ps_16S
} else {
tmp_ps0 = ps_18S
}
# select data from the chosen step
if (tmp_phase == "Step 1") {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase %in% c("Step 1","Step 0")) # select both Step 1 treatments and Original soil
} else {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase == "Step 2") # select both Step 2 treatments
}
# wrangle ps object
## aggregate by treatment
tmp_ps <- merge_samples(tmp_ps,"treatment")
## aggregate by taxa_rank
tmp_ps <- tax_glom(tmp_ps,taxrank = "Class")
## transform to relative abundance
tmp_ps <- transform_sample_counts(tmp_ps,function(x) x / sum(x))
# extract relative abundance and taxonomy
tmp_mdf <- psmelt(tmp_ps)
View(tmp_mdf)
tmp_mdf <- tmp_mdf[,c("Sample","Abundance","Class")]
colnames(tmp_mdf) <- c("treatment","Abundance","Class")
# select most abundant Class
tmp_mdf %>% group_by(Class) %>% summarise(sum=sum(Abundance))
# select most abundant Class
tmp_class = tmp_mdf %>% group_by(Class) %>% summarise(sum=sum(Abundance))
View(tmp_class)
tmp_class = tibble("Class"=tmp_ps@tax_table[,"Class"],
"Abundance" = taxa_sums(tmp_ps))
View(tmp_class)
# select data from the chosen barcode
if (tmp_barcode == "16S") {
tmp_ps0 = ps_16S
} else {
tmp_ps0 = ps_18S
}
# select data from the chosen step
if (tmp_phase == "Step 1") {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase %in% c("Step 1","Step 0")) # select both Step 1 treatments and Original soil
} else {
tmp_ps = subset_samples(tmp_ps0,tmp_ps0@sam_data$phase == "Step 2") # select both Step 2 treatments
}
tmp_class = tibble("Class"=tmp_ps@tax_table[,"Class"],
"Abundance" = taxa_sums(tmp_ps))
# select most abundant Class
tmp_class = tmp_mdf %>% group_by(Class) %>% summarise(sum=sum(Abundance))
tmp_class = tibble("Class"=tmp_ps@tax_table[,"Class"],
"Abundance" = taxa_sums(tmp_ps))
# select most abundant Class
#tmp_class = tmp_mdf %>% group_by(Class) %>% summarise(sum=sum(Abundance))
# select most abundant Class
tmp_class = tmp_class %>% group_by(Class) %>% summarise(sum=sum(Abundance))
View(tmp_class)
tmp_class = tibble("Class"=tmp_ps0@tax_table[,"Class"],
"Abundance" = taxa_sums(tmp_ps0))
# select most abundant Class
tmp_class = tmp_class %>% group_by(Class) %>% summarise(sum=sum(Abundance))
order(tmp_class$Class,tmp_class$sum)
tmp_class = tibble("Class"=tmp_ps0@tax_table[,"Class"],
"Abundance" = taxa_sums(tmp_ps0))
# select most abundant Class
tmp_class = tmp_class %>% group_by(Class) %>% summarise(sum=sum(Abundance))
order(tmp_class$Class,tmp_class$sum)
tmp_class$Class[order(tmp_class$Class,tmp_class$sum)]â™¦
tmp_class$Class[order(tmp_class$Class,tmp_class$sum)]
tmp_class$Class[order(tmp_class,tmp_class$sum)[1:14]]
tmp_class$Class[order(tmp_class,tmp_class$sum)]
tmp_class$Class[order(tmp_class$sum, decreasing = TRUE)]
tmp_class$Class[order(tmp_class$sum, decreasing = TRUE)[1:14]]
tmp_class = tmp_class$Class[order(tmp_class$sum, decreasing = TRUE)[1:14]]
tmp_class@.Data
as.character(tmp_class@.Data)
tmp_class = as.character(tmp_class$Class[order(tmp_class$sum, decreasing = TRUE)[1:14]])
tmp_class = tibble("Class"=tmp_ps0@tax_table[,"Class"],
"Abundance" = taxa_sums(tmp_ps0))
# select most abundant Class
tmp_class = tmp_class %>% group_by(Class) %>% summarise(sum=sum(Abundance))
tmp_class = as.character(tmp_class$Class[order(tmp_class$sum, decreasing = TRUE)[1:14]])
tmp_class = tibble("Class"=tmp_ps0@tax_table[,"Class"],
"Abundance" = taxa_sums(tmp_ps0))
# select most abundant Class
tmp_class = tmp_class %>% group_by(Class) %>% summarise(sum=sum(Abundance))
tmp_class = as.character(tmp_class$Class[order(tmp_class$sum, decreasing = TRUE)[1:14]])
tmp_class
ntaxa(tmp_ps)
colnames(data_function)
knitr::opts_chunk$set(echo = TRUE)
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# select which data you want to test
tmp_step = "Step 1" # "Step 1" or "Step 2"
# choose a variable from Data-function between:
## soil properties: "humidity" or "pH"
## N-cycling activities: "NO3", "NH4", "Ntot"
## C-cycling activites: "fructose", "Gallic_acid", "alanine"
## abundance of microbial groups: "16S", "nirK", "nirS", "AOB", "nifH", "ITS"
tmp_function = "pH"
if (tmp_step == "Step 1") {
tmp_data <- data_function[data_function %in% c("Step 1","Step 0"),] # select Step 1 treatments, Original soil and Sterile soil
tmp_data <- tmp_data[,c("treatment","pool",tmp_function)] # select the chosen function
### keep sterile soil for pH, NO3 and NH4 and Original soil for other functions
if (tmp_y %in% c("pH","NO3","NH4","Ntot")) {
tmp_data = tmp_data[tmp_data$treatment != "Original soil",]
} else {
tmp_data = tmp_data[tmp_data$treatment != "Sterile soil",]
}
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
} else {
tmp_data <- data_function[data_function == "Step 2",] # select Step 1 treatments, Original soil and Sterile soil
tmp_data <- tmp_data[,c("treatment","pool",tmp_function)] # select the chosen function
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
}
tmp_data <- data_function[data_function %in% c("Step 1","Step 0"),] # select Step 1 treatments, Original soil and Sterile soil
if (tmp_step == "Step 1") {
tmp_data <- data_function[data_function$phase %in% c("Step 1","Step 0"),] # select Step 1 treatments, Original soil and Sterile soil
tmp_data <- tmp_data[,c("treatment","pool",tmp_function)] # select the chosen function
### keep sterile soil for pH, NO3 and NH4 and Original soil for other functions
if (tmp_y %in% c("pH","NO3","NH4","Ntot")) {
tmp_data = tmp_data[tmp_data$treatment != "Original soil",]
} else {
tmp_data = tmp_data[tmp_data$treatment != "Sterile soil",]
}
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
} else {
tmp_data <- data_function[data_function$phase == "Step 2",] # select Step 1 treatments, Original soil and Sterile soil
tmp_data <- tmp_data[,c("treatment","pool",tmp_function)] # select the chosen function
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
}
if (tmp_step == "Step 1") {
tmp_data <- data_function[data_function$phase %in% c("Step 1","Step 0"),] # select Step 1 treatments, Original soil and Sterile soil
tmp_data <- tmp_data[,c("treatment","pool",tmp_function)] # select the chosen function
### keep sterile soil for pH, NO3 and NH4 and Original soil for other functions
if (tmp_function %in% c("pH","NO3","NH4","Ntot")) {
tmp_data = tmp_data[tmp_data$treatment != "Original soil",]
} else {
tmp_data = tmp_data[tmp_data$treatment != "Sterile soil",]
}
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
} else {
tmp_data <- data_function[data_function$phase == "Step 2",] # select Step 1 treatments, Original soil and Sterile soil
tmp_data <- tmp_data[,c("treatment","pool",tmp_function)] # select the chosen function
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
}
colnames(tmp_data)[3] <- "value"
View(tmp_data)
library(agricolae)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment, na.action = na.omit )
summary(tmp_lm)
# anova
anova(tmp_lm)
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
tmp_comp <- HSD.test(tmp_aov,'tmp_data$treatment',alpha = 0.05,group = T)
# tibble with statistical groups
tmp_stat = tibble("treatment"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_data$value"]],
"stat_groups"=tmp_comp[["groups"]][["groups"]])
library(agricolae)
library(tibble)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment, na.action = na.omit )
summary(tmp_lm)
# anova
anova(tmp_lm)
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
tmp_comp <- HSD.test(tmp_aov,'tmp_data$treatment',alpha = 0.05,group = T)
# tibble with statistical groups
tmp_stat = tibble("treatment"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_data$value"]],
"stat_groups"=tmp_comp[["groups"]][["groups"]])
# put a * for treatments in a different group than the control
tmp_stat[,"stat_dif_control"] <- NA
if (tmp_step == "Step 1") {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C"],""))
} else {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C_C"],""))
}
tmp_stat$stat_groups[tmp_stat$treatment == "C"]
library(agricolae)
library(tibble)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment, na.action = na.omit )
summary(tmp_lm)
# anova
anova(tmp_lm)
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
tmp_comp <- HSD.test(tmp_aov,'tmp_data$treatment',alpha = 0.05,group = T)
# tibble with statistical groups
tmp_stat = tibble("treatment"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_data$value"]],
"stat_groups"=as.character(tmp_comp[["groups"]][["groups"]]))
# put a * for treatments in a different group than the control
tmp_stat[,"stat_dif_control"] <- NA
if (tmp_step == "Step 1") {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C"],""))
} else {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C_C"],""))
}
for (i in tmp_stat$treatment) {
tmp_group_treatment = unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == i],""))
ifelse(length(intersect(tmp_group_control,tmp_group_treatment)) == 0,
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- "*",
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- " ")
}
tmp_group_treatment = unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == i],""))
ifelse(length(intersect(tmp_group_control,tmp_group_treatment)) == 0,
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- "*",
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- " ")
length(intersect(tmp_group_control,tmp_group_treatment))
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- "*"
library(agricolae)
library(tibble)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment, na.action = na.omit )
summary(tmp_lm)
# anova
anova(tmp_lm)
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
tmp_comp <- HSD.test(tmp_aov,'tmp_data$treatment',alpha = 0.05,group = T)
# tibble with statistical groups
tmp_stat = tibble("treatment"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_data$value"]],
"stat_groups"=as.character(tmp_comp[["groups"]][["groups"]]))
# put a * for treatments in a different group than the control
tmp_stat[,"stat_dif_control"] <- " "
if (tmp_step == "Step 1") {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C"],""))
} else {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C_C"],""))
}
for (i in tmp_stat$treatment) {
tmp_group_treatment = unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == i],""))
ifelse(length(intersect(tmp_group_control,tmp_group_treatment)) == 0,
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- "*",
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- " ")
}
rm(i)
knitr::opts_chunk$set(echo = TRUE)
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# select which data you want to test
tmp_barcode = "16S" # "16S" or "18S"
tmp_step = "Step 2" # "Step 1" or "Step 2"
tmp_index = "observed_species" # "chao1", "dominance", "equitability", "observed_species", "PD_whole_tree", "shannon", "simpson_reciprocal"
if (tmp_barcode == "16S") {
tmp_alphadiv = alpha_div_16S
} else {
tmp_alphadiv = alpha_div_18S
}
if (tmp_step == "Step 1") {
tmp_data <- tmp_alphadiv[tmp_alphadiv$phase %in% c("Step 1","Step 0"),] # select both Step 1 treatments and Original soil
tmp_data <- tmp_data[,c("sample","treatment",tmp_index)] # select the chosen index
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
} else {
tmp_data <- tmp_alphadiv[tmp_alphadiv$phase == "Step 2",]
tmp_data <- tmp_data[,c("sample","treatment",tmp_index)] # select the chosen index
tmp_data <- tmp_data[complete.cases(tmp_data),] # remove NAs
}
colnames(tmp_data)[3] <- "value"
library(agricolae)
# linear model
tmp_lm = lm(tmp_data$value ~ tmp_data$treatment, na.action = na.omit )
summary(tmp_lm)
# anova
anova(tmp_lm)
tmp_aov = aov(tmp_lm)
summary(tmp_aov)
# post hoc Tukey test
tmp_comp <- HSD.test(tmp_aov,'tmp_data$treatment',alpha = 0.05,group = T)
# tibble with statistical groups
tmp_stat = tibble("treatment"=rownames(tmp_comp[["groups"]]),
"mean"=tmp_comp[["groups"]][["tmp_data$value"]],
"stat_groups"=as.character(tmp_comp[["groups"]][["groups"]]))
# put a * for treatments in a different group than the control
tmp_stat[,"stat_dif_control"] <- " "
if (tmp_step == "Step 1") {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C"],""))
} else {
tmp_group_control <- unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == "C_C"],""))
}
for (i in tmp_stat$treatment) {
tmp_group_treatment = unlist(strsplit(tmp_stat$stat_groups[tmp_stat$treatment == i],""))
ifelse(length(intersect(tmp_group_control,tmp_group_treatment)) == 0,
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- "*",
tmp_stat[tmp_stat$treatment == i,"stat_dif_control"] <- " ")
}
rm(i)
# remove all temporary objects from your environment
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
rm(X,Y,Z)
save.image("D:/Thesis/EMFEED/BISCAL_xp1/Gitlab/GlobalEnv.RData")
